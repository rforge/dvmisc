// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// sumc_i
int sumc_i(IntegerVector x);
RcppExport SEXP dvmisc_sumc_i(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    int __result = sumc_i(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// meanc_i
double meanc_i(IntegerVector x);
RcppExport SEXP dvmisc_meanc_i(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    double __result = meanc_i(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// varc_n
double varc_n(NumericVector x);
RcppExport SEXP dvmisc_varc_n(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    double __result = varc_n(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// varc_i
double varc_i(IntegerVector x);
RcppExport SEXP dvmisc_varc_i(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    double __result = varc_i(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// covc_n
double covc_n(NumericVector x, NumericVector y);
RcppExport SEXP dvmisc_covc_n(SEXP xSEXP, SEXP ySEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector y = Rcpp::as<NumericVector >(ySEXP);
    double __result = covc_n(x, y);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// covc_i
double covc_i(IntegerVector x, IntegerVector y);
RcppExport SEXP dvmisc_covc_i(SEXP xSEXP, SEXP ySEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    IntegerVector y = Rcpp::as<IntegerVector >(ySEXP);
    double __result = covc_i(x, y);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// minc_n
double minc_n(NumericVector x);
RcppExport SEXP dvmisc_minc_n(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    double __result = minc_n(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// minc_i
int minc_i(IntegerVector x);
RcppExport SEXP dvmisc_minc_i(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    int __result = minc_i(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// maxc_n
double maxc_n(NumericVector x);
RcppExport SEXP dvmisc_maxc_n(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    double __result = maxc_n(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// maxc_i
int maxc_i(IntegerVector x);
RcppExport SEXP dvmisc_maxc_i(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    int __result = maxc_i(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// rangec_n
NumericVector rangec_n(NumericVector x);
RcppExport SEXP dvmisc_rangec_n(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector __result = rangec_n(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// rangec_i
IntegerVector rangec_i(IntegerVector x);
RcppExport SEXP dvmisc_rangec_i(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    IntegerVector __result = rangec_i(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// true_rangec_n
double true_rangec_n(NumericVector x);
RcppExport SEXP dvmisc_true_rangec_n(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    double __result = true_rangec_n(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// true_rangec_i
int true_rangec_i(IntegerVector x);
RcppExport SEXP dvmisc_true_rangec_i(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    int __result = true_rangec_i(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// diff1c_n
NumericVector diff1c_n(NumericVector x);
RcppExport SEXP dvmisc_diff1c_n(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector __result = diff1c_n(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// diff1c_i
IntegerVector diff1c_i(IntegerVector x);
RcppExport SEXP dvmisc_diff1c_i(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    IntegerVector __result = diff1c_i(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// diffc_n
NumericVector diffc_n(NumericVector x, int lag);
RcppExport SEXP dvmisc_diffc_n(SEXP xSEXP, SEXP lagSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    int lag = Rcpp::as<int >(lagSEXP);
    NumericVector __result = diffc_n(x, lag);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// diffc_i
IntegerVector diffc_i(IntegerVector x, int lag);
RcppExport SEXP dvmisc_diffc_i(SEXP xSEXP, SEXP lagSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    int lag = Rcpp::as<int >(lagSEXP);
    IntegerVector __result = diffc_i(x, lag);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// which_minc_nv
int which_minc_nv(NumericVector x);
RcppExport SEXP dvmisc_which_minc_nv(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    int __result = which_minc_nv(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// which_minc_iv
int which_minc_iv(IntegerVector x);
RcppExport SEXP dvmisc_which_minc_iv(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    int __result = which_minc_iv(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// which_minc_nm
IntegerVector which_minc_nm(NumericMatrix x);
RcppExport SEXP dvmisc_which_minc_nm(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericMatrix x = Rcpp::as<NumericMatrix >(xSEXP);
    IntegerVector __result = which_minc_nm(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// which_minc_im
IntegerVector which_minc_im(IntegerMatrix x);
RcppExport SEXP dvmisc_which_minc_im(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerMatrix x = Rcpp::as<IntegerMatrix >(xSEXP);
    IntegerVector __result = which_minc_im(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// which_maxc_nv
int which_maxc_nv(NumericVector x);
RcppExport SEXP dvmisc_which_maxc_nv(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    int __result = which_maxc_nv(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// which_maxc_iv
int which_maxc_iv(IntegerVector x);
RcppExport SEXP dvmisc_which_maxc_iv(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    int __result = which_maxc_iv(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// which_maxc_nm
IntegerVector which_maxc_nm(NumericMatrix x);
RcppExport SEXP dvmisc_which_maxc_nm(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericMatrix x = Rcpp::as<NumericMatrix >(xSEXP);
    IntegerVector __result = which_maxc_nm(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// which_maxc_im
IntegerVector which_maxc_im(IntegerMatrix x);
RcppExport SEXP dvmisc_which_maxc_im(SEXP xSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerMatrix x = Rcpp::as<IntegerMatrix >(xSEXP);
    IntegerVector __result = which_maxc_im(x);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// weighted_meanc_nn
double weighted_meanc_nn(NumericVector x, NumericVector w);
RcppExport SEXP dvmisc_weighted_meanc_nn(SEXP xSEXP, SEXP wSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector w = Rcpp::as<NumericVector >(wSEXP);
    double __result = weighted_meanc_nn(x, w);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// weighted_meanc_ni
double weighted_meanc_ni(NumericVector x, IntegerVector w);
RcppExport SEXP dvmisc_weighted_meanc_ni(SEXP xSEXP, SEXP wSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    IntegerVector w = Rcpp::as<IntegerVector >(wSEXP);
    double __result = weighted_meanc_ni(x, w);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// weighted_meanc_in
double weighted_meanc_in(IntegerVector x, NumericVector w);
RcppExport SEXP dvmisc_weighted_meanc_in(SEXP xSEXP, SEXP wSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    NumericVector w = Rcpp::as<NumericVector >(wSEXP);
    double __result = weighted_meanc_in(x, w);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
// weighted_meanc_ii
double weighted_meanc_ii(IntegerVector x, IntegerVector w);
RcppExport SEXP dvmisc_weighted_meanc_ii(SEXP xSEXP, SEXP wSEXP) {
  BEGIN_RCPP
  SEXP __sexp_result;
  {
    Rcpp::RNGScope __rngScope;
    IntegerVector x = Rcpp::as<IntegerVector >(xSEXP);
    IntegerVector w = Rcpp::as<IntegerVector >(wSEXP);
    double __result = weighted_meanc_ii(x, w);
    PROTECT(__sexp_result = Rcpp::wrap(__result));
  }
  UNPROTECT(1);
  return __sexp_result;
  END_RCPP
}
